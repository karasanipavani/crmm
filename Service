using Microsoft.AspNetCore.Mvc;
using onlinekyc.Models;
using onlinekyc.Services;
using System.Threading.Tasks;
using System.Text;

namespace onlinekyc.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class UserController : ControllerBase
    {
        private readonly IUserService _userService;

        public UserController(IUserService userService)
        {
            _userService = userService;
        }

        [HttpPost("register")]
        public async Task<IActionResult> Register(UserRegisterDto userRegisterDto)
        {
            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            var user = new User
            {
                Username = userRegisterDto.Username,
                PasswordHash = Encoding.UTF8.GetBytes(userRegisterDto.Password), // Simplified for example
                Role = "Customer"
            };

            var result = await _userService.RegisterUserAsync(user);
            if (!result)
                return BadRequest("User registration failed");

            return Ok("User registered successfully");
        }

        [HttpPost("login")]
        public async Task<IActionResult> Login(UserLoginDto userLoginDto)
        {
            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            var validUser = await _userService.ValidateUserCredentialsAsync(userLoginDto.Username, userLoginDto.Password);
            if (!validUser)
                return Unauthorized("Invalid credentials");

            var token = await _userService.GenerateJwtTokenAsync(userLoginDto.Username);
            return Ok(new { Token = token });
        }
    }
}

using onlinekyc.Data;
using onlinekyc.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;

namespace onlinekyc.Services
{
    public class UserService : IUserService
    {
        private readonly KYCContext _context;
        private readonly IConfiguration _configuration;

        public UserService(KYCContext context, IConfiguration configuration)
        {
            _context = context;
            _configuration = configuration;
        }

        public async Task<bool> ValidateUserCredentialsAsync(string username, string password)
        {
            var user = await _context.Users.SingleOrDefaultAsync(u => u.Username == username);
            if (user == null)
                return false;

            var passwordHash = Encoding.UTF8.GetBytes(password); // Simplified for example
            return user.PasswordHash.SequenceEqual(passwordHash);
        }

        public async Task<string> GenerateJwtTokenAsync(string username)
        {
            var user = await _context.Users.SingleOrDefaultAsync(u => u.Username == username);

            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.UTF8.GetBytes(_configuration["Jwt:Key"]);
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new Claim[]
                {
                    new Claim(ClaimTypes.Name, user.Username),
                    new Claim(ClaimTypes.Role, user.Role)
                }),
                Expires = DateTime.UtcNow.AddMinutes(double.Parse(_configuration["Jwt:ExpireMinutes"])),
                Issuer = _configuration["Jwt:Issuer"],
                Audience = _configuration["Jwt:Audience"],
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
            };
            var token = tokenHandler.CreateToken(tokenDescriptor);
            return tokenHandler.WriteToken(token);
        }

        public async Task<bool> RegisterUserAsync(User user)
        {
            await _context.Users.AddAsync(user);
            await _context.SaveChangesAsync();
            return true;
        }
    }
}

using onlinekyc.Data;
using onlinekyc.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;

namespace onlinekyc.Services
{
    public class UserService : IUserService
    {
        private readonly KYCContext _context;
        private readonly IConfiguration _configuration;

        public UserService(KYCContext context, IConfiguration configuration)
        {
            _context = context;
            _configuration = configuration;
        }

        public async Task<bool> ValidateUserCredentialsAsync(string username, string password)
        {
            var user = await _context.Users.SingleOrDefaultAsync(u => u.Username == username);
            if (user == null)
                return false;

            var passwordHash = Encoding.UTF8.GetBytes(password); // Simplified for example
            return user.PasswordHash.SequenceEqual(passwordHash);
        }

        public async Task<string> GenerateJwtTokenAsync(string username)
        {
            var user = await _context.Users.SingleOrDefaultAsync(u => u.Username == username);

            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.UTF8.GetBytes(_configuration["Jwt:Key"]);
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new Claim[]
                {
                    new Claim(ClaimTypes.Name, user.Username),
                    new Claim(ClaimTypes.Role, user.Role)
                }),
                Expires = DateTime.UtcNow.AddMinutes(double.Parse(_configuration["Jwt:ExpireMinutes"])),
                Issuer = _configuration["Jwt:Issuer"],
                Audience = _configuration["Jwt:Audience"],
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
            };
            var token = tokenHandler.CreateToken(tokenDescriptor);
            return tokenHandler.WriteToken(token);
        }

        public async Task<bool> RegisterUserAsync(User user)
        {
            await _context.Users.AddAsync(user);
            await _context.SaveChangesAsync();
            return true;
        }
    }
}

namespace onlinekyc.Models
{
    public class UserRegisterDto
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }
}

namespace onlinekyc.Models
{
    public class UserLoginDto
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }
}



private string ComputeSha256Hash(string rawData)
        {
            using (SHA256 sha256Hash = SHA256.Create())
            {
                // ComputeHash - returns byte array
                byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(rawData));

                // Convert byte array to a string
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < bytes.Length; i++)
                {
                    builder.Append(bytes[i].ToString("x2"));
                }
                return builder.ToString();
            }
        }
    }
}


using onlinekyc.Models;
using System.Threading.Tasks;

namespace onlinekyc.Services
{
    public interface IKycDetailsService
    {
        Task<bool> SubmitKycDetailsAsync(UserKycDetails userKycDetails);
    }
}

using onlinekyc.Data;
using onlinekyc.Models;
using System.Threading.Tasks;

namespace onlinekyc.Services
{
    public class KycDetailsService : IKycDetailsService
    {
        private readonly KYCContext _context;

        public KycDetailsService(KYCContext context)
        {
            _context = context;
        }

        public async Task<bool> SubmitKycDetailsAsync(UserKycDetails userKycDetails)
        {
            await _context.UserKycDetails.AddAsync(userKycDetails);
            await _context.SaveChangesAsync();
            return true;
        }
    }
}

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using onlinekyc.Models;
using onlinekyc.Services;
using System.Threading.Tasks;

namespace onlinekyc.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class KycDetailsController : ControllerBase
    {
        private readonly IKycDetailsService _kycDetailsService;

        public KycDetailsController(IKycDetailsService kycDetailsService)
        {
            _kycDetailsService = kycDetailsService;
        }

        [HttpPost("submit")]
        [Authorize(Roles = "Customer")]
        public async Task<IActionResult> SubmitKycDetails([FromBody] UserKycDetails userKycDetails)
        {
            var result = await _kycDetailsService.SubmitKycDetailsAsync(userKycDetails);
            if (!result)
            {
                return BadRequest("KYC submission failed.");
            }

            return Ok("KYC details submitted successfully.");
        }
    }
}
